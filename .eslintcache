[{"E:\\Neha\\React.js\\weather\\src\\index.js":"1","E:\\Neha\\React.js\\weather\\src\\App.js":"2","E:\\Neha\\React.js\\weather\\src\\Result.js":"3","E:\\Neha\\React.js\\weather\\src\\Card.js":"4","E:\\Neha\\React.js\\weather\\src\\Remove.js":"5","E:\\Neha\\React.js\\weather\\src\\Add.js":"6"},{"size":149,"mtime":1610046209839,"results":"7","hashOfConfig":"8"},{"size":1257,"mtime":1610802920258,"results":"9","hashOfConfig":"8"},{"size":1807,"mtime":1611250596679,"results":"10","hashOfConfig":"8"},{"size":1182,"mtime":1610819099645,"results":"11","hashOfConfig":"8"},{"size":1341,"mtime":1610817968879,"results":"12","hashOfConfig":"8"},{"size":1716,"mtime":1610821108182,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"xm74bs",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"E:\\Neha\\React.js\\weather\\src\\index.js",[],["29","30"],"E:\\Neha\\React.js\\weather\\src\\App.js",[],"E:\\Neha\\React.js\\weather\\src\\Result.js",[],"E:\\Neha\\React.js\\weather\\src\\Card.js",["31"],"import React, {useState} from 'react';\r\nimport './weather.css';\r\nimport Remove from './Remove';\r\n\r\nconst Card = ({cards, results }) => {\r\n    const [modal, setModal] = useState(false);\r\n    const toggle = () => setModal(!modal);\r\n    let date = new Date();\r\n\r\n    const renderedList = cards.map((card,index)=>{\r\n        if(index>0){\r\n            return(\r\n                <div onClick={toggle} className='cardList'>\r\n                    <b>Weather in {card.city}, {card.country}</b>\r\n                    <br/>\r\n                    <p className='modalText'> {card.temp}\r\n                    <br/>\r\n                    {card.main}</p>\r\n                    <br/>\r\n                    <span className='dateDisplay'> {date.getDate()} {date.toLocaleString('default', { month: 'long' })} {date.getFullYear()}</span>\r\n                </div>\r\n            );\r\n        }\r\n    });\r\n    \r\n    return(\r\n        <div>\r\n            <div className=\"d-flex flex-wrap\">\r\n                {renderedList}\r\n            </div>\r\n            <div>\r\n                <Remove results={results} toggle={toggle} modal={modal} />            \r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","E:\\Neha\\React.js\\weather\\src\\Remove.js",[],"E:\\Neha\\React.js\\weather\\src\\Add.js",["32"],"import './weather.css';\r\nimport React from 'react';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst Add = ({modal, toggle, results, setModal, cards, setCards, image}) => {\r\n    \r\n    const addToCard = () => {\r\n        setCards(cards.concat({\r\n            city: results.name,\r\n            country: results.sys.country,\r\n            temp: results.main.temp + '°C',\r\n            main: results.weather[0].main\r\n        }));\r\n        setModal(!modal);\r\n    };\r\n    return(\r\n        <Modal isOpen={modal} toggle={toggle} className='modal-dialog modal-dialog-centered' >\r\n                    <ModalHeader  toggle={toggle}>Weather in {results.name},{results.sys.country}</ModalHeader>\r\n                    <ModalBody  >\r\n                        <p className='modalText'>{results.main.temp} °C\r\n                        <br/>\r\n                        <img> {image} </img>{results.weather[0].main}\r\n                        <br/>\r\n                        <br/></p>\r\n                        <ul>\r\n                            <li>Wind: {results.wind.speed},{results.wind.deg} </li>\r\n                            <li>Humidity: {results.main.humidity}% </li>\r\n                            <li>Pressure: {results.main.pressure} hpa </li>\r\n                            <li>Sunrise: {results.sys.sunrise} </li>\r\n                            <li>Sunset: {results.sys.sunset} </li>\r\n                        </ul>\r\n                    </ModalBody>\r\n                    <ModalFooter >\r\n                    <button onClick={addToCard}>Add</button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n    );\r\n};\r\n\r\nexport default Add;",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":10,"column":48,"nodeType":"39","messageId":"40","endLine":10,"endColumn":50},{"ruleId":"41","severity":1,"message":"42","line":23,"column":25,"nodeType":"43","endLine":23,"endColumn":30},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]